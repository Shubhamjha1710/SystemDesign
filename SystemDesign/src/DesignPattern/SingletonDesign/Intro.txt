The Singleton pattern falls under the category of creational design patterns
Singleton pattern ensures that only one object (instance) of a class is ever created
in the entire program â€” and it provides a global point of access to that instance.
So, One class --> One object --> Used everywhere in the app.


Real world use cases
1. Logging Systems: Maintain a consistent logging mechanism across an application.
2. Configuration Managers: Centralize access to manage configuration settings.
3. Database Connections: Manage a single point for database access.


Features of the Singleton Design Pattern
1. Single Instance: Ensures only one object of the class exists in the JVM.
2. Global Access Point: Provides a centralized way to access the instance.
3. Thread Safety: Can be designed to work correctly in multithreaded environments.
4. Resource Management: Useful for managing shared resources like configurations,
logging or database connections.


When to use
1. Consider using the Singleton pattern when you need to ensure that only one instance
of a class exists in your application.


Component of singleton design
1. private static instance: Holds the reference of single object
2. private constructor:	To prevent the calling the constructor to create a new object
3. public static getInstance(): Gives global access to the single object


Variation of singleton design
1.Eager Initialization: Object created immediately when the class loads. This is thread
safe and simple.
class Logger {
    private static final Logger instance = new Logger();
    private Logger() {}
    public static Logger getInstance() { return instance; }
}

2.Lazy Initialization: Single Object created only when it is need
class Logger {
    private static Logger instance;
    private Logger() {}
    public static Logger getInstance() {
        if (instance == null) {
            instance = new Logger();
        }
        return instance;
    }
}

3.Thread-Safe Singleton
class Logger {
    private static Logger instance;
    private Logger() {}
    public static synchronized Logger getInstance() {
        if (instance == null) {
            instance = new Logger();
        }
        return instance;
    }
}